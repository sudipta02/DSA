https://leetcode.com/problems/longest-repeating-character-replacement/
TC: O(N + N * 26)
SC: O(26)
class Solution {
public:
    int characterReplacement(string s, int k) {
        int left = 0, right = 0, n = s.size();
        int maxFreq = 0, maxLen = 0;
        vector<int> hm(26, 0);
        while(right < n){
            hm[s[right] - 'A']++;
            maxFreq = max(maxFreq, hm[s[right] - 'A']);
            if((right - left + 1) - maxFreq <= k){
                maxLen = max(maxLen, right - left + 1);
            }
            while((right - left + 1) - maxFreq > k && left <= right){
                hm[s[left] - 'A']--;
                maxFreq = 0;
                for(int i = 0; i < 26; i++){
                    maxFreq = max(maxFreq, hm[i]);
                }
                left++;
            }
            right++;
        }
        return maxLen;
    }
};