https://leetcode.com/problems/longest-substring-without-repeating-characters/
TC: O(N)
SC: O(N)
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int result = 0;
        int n = s.size();
        unordered_map<char, int> mp;
        int left = 0, right = 0;
        while(right < n){
            if(mp.find(s[right]) == mp.end()){
                result = max(result, right - left + 1);
                mp[s[right]] = 1;
                right++;
            }
            else {
                while(left < right && s[left] != s[right]) {
                    mp.erase(s[left]);
                    left++;
                }
                left++;
                right++;
            }
        }
        return result;
    }
};

//-------------Striver Approach: ----------------
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int left = 0, right = 0, n = s.size();
        int maxLen = 0;
        vector<int> hm(256, -1);
        while(right < n){
            if(hm[s[right]] != -1){
                if(hm[s[right]] >= left) {
                    left = hm[s[right]] + 1;
                }
            }
            int len = right - left + 1;
            maxLen = max(len, maxLen);
            hm[s[right]] = right;
            right++;
        }
        return maxLen;
    }
};