https://www.geeksforgeeks.org/problems/rat-in-a-maze-problem/1
T.C: O(4^(n*n)) (but typically much lower due to pruning (isValidPath check))

class Solution {
  public:
    bool isValidPath(int row, int col, vector<vector<int>> &visited, int n, vector<vector<int>> &mat){
        if(row >= 0 && row < n && col >= 0 && col < n && visited[row][col] == 0 && mat[row][col] == 1){
            return true;
        }
        return false;
    }
    void recursion(vector<vector<int>> &mat, vector<vector<int>> &visited, vector<string> &ans, string path, int row, int col, int n){
        if(row == n-1 && col == n-1){
            ans.push_back(path);
            return;
        }
        for(int i = 0; i < 4; i++){
            vector<int> di = {-1, 0, 1, 0};
            vector<int> dj = {0, 1, 0, -1};
            vector<char> dir = {'U', 'R', 'D', 'L'};
            int newrow = row + di[i];
            int newcol = col + dj[i];
            if(isValidPath(newrow, newcol, visited, n, mat)){
                visited[newrow][newcol] = 1;
                path = path + dir[i];
                recursion(mat, visited, ans, path, newrow, newcol, n);
                path.pop_back();
                visited[newrow][newcol] = 0;
            }
        }
    }
    vector<string> findPath(vector<vector<int>> &mat) {
        vector<string> ans;
        string path = "";
        int n = mat.size();
        vector<vector<int>> visited(n, vector<int>(n,0));
        if(mat[0][0] == 0 || mat[n-1][n-1] == 0)
            return ans;
        visited[0][0] = 1;
        recursion(mat, visited, ans, path, 0, 0, n);
        sort(ans.begin(), ans.end());
        return ans;
    }
};