https://leetcode.com/problems/longest-common-subsequence/description/
//Approach 1(Memoization)
class Solution {
public:
    int f(int i, int j, string &t1, string &t2, vector<vector<int>> &dp){
        if(i < 0 || j < 0) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        if(t1[i] == t2[j]) return dp[i][j] = 1 + f(i-1, j-1, t1, t2, dp);
        return dp[i][j] = max(f(i-1, j, t1, t2, dp), f(i, j-1, t1, t2, dp));
    }
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size();
        int n = text2.size();
        vector<vector<int>> dp(m, vector<int>(n, -1));
        return f(m-1, n-1, text1, text2, dp);
    }
};

//Approach 2(Tabulation)
class Solution {
    public:
        int longestCommonSubsequence(string text1, string text2) {
            int m = text1.size();
            int n = text2.size();
            vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
            for(int i = 0; i <= m; i++) dp[i][0] = 0; // this line is not necessary
            for(int j = 0; j <= n; j++) dp[0][j] = 0; //this line is not necessary
            for(int i = 1; i <= m; i++){
                for(int j = 1; j <= n; j++){
                    if(text1[i-1] == text2[j-1]) dp[i][j] = 1 + dp[i-1][j-1];
                    else dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
                }
            }
            return dp[m][n];
        }
    };