https://leetcode.com/problems/longest-palindromic-subsequence/description/
//Tabulation
class Solution {
public:
    int longestPalindromeSubseq(string s) {
        string text1 = s;
        string temp = s;
        reverse(temp.begin(), temp.end());
        string text2 = temp;
        int m = text1.size();
        int n = text2.size();
        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        for(int i = 0; i <= m; i++) dp[i][0] = 0; // this line is not necessary
        for(int j = 0; j <= n; j++) dp[0][j] = 0; //this line is not necessary
        for(int i = 1; i <= m; i++){
            for(int j = 1; j <= n; j++){
                if(text1[i-1] == text2[j-1]) dp[i][j] = 1 + dp[i-1][j-1];
                else dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
            }
        }
        return dp[m][n];
    }
};