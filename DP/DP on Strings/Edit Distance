https://leetcode.com/problems/edit-distance/
//Approach 1(Memoization)
class Solution {
public:
    int f(int i, int j, string &s1, string &s2, vector<vector<int>> &dp){
        if(i < 0) return j+1;
        if(j < 0) return i+1;
        if(dp[i][j] != -1) return dp[i][j];
        if(s1[i] == s2[j]) return dp[i][j] = 0 + f(i-1, j-1, s1, s2, dp);
        return dp[i][j] = 1 + min(f(i, j-1, s1, s2, dp), min(f(i-1, j, s1, s2, dp), f(i-1, j-1, s1, s2, dp)));
    }
    int minDistance(string word1, string word2) {
        int m = word1.size();
        int n = word2.size();
        vector<vector<int>> dp(m, vector<int>(n, -1));
        return f(m-1, n-1, word1, word2, dp);
    }
};

//Approach 2(Tabulation)
class Solution {
    public:
        int minDistance(string s1, string s2) {
            int m = s1.size();
            int n = s2.size();
            vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
            for(int j = 0; j <= n; j++){
                dp[0][j] = j;
            }
            for(int i = 0; i <= m; i++){
                dp[i][0] = i;
            }
            for(int i = 1; i <= m; i++){
                for(int j = 1; j <= n; j++){
                    if(s1[i-1] == s2[j-1]) dp[i][j] = 0 + dp[i-1][j-1];
                    else dp[i][j] = 1 + min(dp[i][j-1], min(dp[i-1][j], dp[i-1][j-1]));
                }
            }
            return dp[m][n];
        }
    };