https://www.geeksforgeeks.org/problems/subset-sum-problem-1611555638/1
Approach - 1 (Memoization)
class Solution {
  public:
    int f(int target, int ind, vector<int> &arr, vector<vector<int>> &dp){
        if(ind == 0) {
            if(arr[0] == target) return 1;
            return 0;
        }
        if(dp[target][ind] != -1) return dp[target][ind];
        if(target - arr[ind] == 0) return 1; 
        int take = 0;
        if(target >= arr[ind]){
            take = f(target-arr[ind], ind-1, arr, dp);
        }
        int notTake = f(target, ind-1, arr, dp);
        if(take == 1 || notTake == 1){
            dp[target][ind] = 1;
        }
        else {
            dp[target][ind] = 0;
        }
        return dp[target][ind]; 
    }
    bool isSubsetSum(vector<int>& arr, int target) {
        int n = arr.size();
        vector<vector<int>> dp(target + 1, vector<int>(n, -1));
        return f(target, n-1, arr, dp) == 1;
    }
};

Approach - 2(Tabulation)
class Solution {
  public:
    bool isSubsetSum(vector<int>& arr, int k) {
        int n = arr.size();
        vector<vector<int>> dp(n, vector<int>(k+1, 0));
        for(int i = 0; i < n; i++){
            dp[i][0] = 1;
        }
        if(arr[0] <= k){
            dp[0][arr[0]] = 1;
        }
        for(int i = 1; i < n; i++){
            for(int target = 1; target <= k; target++){
                    int take = 0;
                    if(target >= arr[i]) {
                        take = dp[i-1][target - arr[i]];
                    }
                    int notTake = dp[i-1][target];
                    if(take == 1 || notTake == 1){
                        dp[i][target] = 1;
                    }
                    else {
                        dp[i][target] = 0;
                    }
            }
        }
        return dp[n-1][k] == 1;
    }
};