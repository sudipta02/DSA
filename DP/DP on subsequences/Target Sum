https://leetcode.com/problems/target-sum/
//Same as count partitions with given difference
// Approach 1(Memoization)
class Solution {
public:
    int f(int ind, int target, vector<vector<int>> &dp,vector<int> &nums){
        if(ind == 0){
            if(target == 0 && nums[0] == 0) return 2;
            if(target == 0 || nums[0] == target) return 1;
            return 0;
        }
        if(dp[target][ind] != -1) return dp[target][ind];
        int take = 0;
        if(target >= nums[ind]){
            take = f(ind -1, target - nums[ind], dp, nums);
        }
        int notTake = f(ind - 1, target, dp, nums);
        return dp[target][ind] = take + notTake;
    }
    int findTargetSumWays(vector<int>& nums, int target) {
        int n = nums.size();
        int totSum = 0;
        for(int i = 0; i < n; i++){
            totSum += nums[i];
        }
        if(totSum - target < 0  || (totSum - target) % 2 != 0) return 0;
        int newTarget = (totSum - target)/2;
        vector<vector<int>> dp(newTarget+1, vector<int>(n, -1));
        return f(n-1, newTarget, dp, nums);
    }
};

//Approach 2(Tabulation)
int findTargetSumWays(vector<int>& nums, int target) {
    int n = nums.size();
    int totSum = 0;
    
    // Compute total sum of nums
    for(int i = 0; i < n; i++){
        totSum += nums[i];
    }

    // Check if partitioning is possible
    if(totSum - target < 0 || (totSum - target) % 2 != 0) return 0;
    
    int newTarget = (totSum - target) / 2;
    vector<vector<int>> dp(n, vector<int>(newTarget + 1, 0));

    // Base cases
    if (nums[0] == 0) dp[0][0] = 2;  // {0} can be included or excluded
    else dp[0][0] = 1;               // Only {} contributes to sum 0

    if (nums[0] <= newTarget && nums[0] != 0) dp[0][nums[0]] = 1;

    // Fill DP table
    for(int ind = 1; ind < n; ind++) {
        for(int t = 0; t <= newTarget; t++) {
            int take = 0;
            if(t >= nums[ind]) {
                take = dp[ind - 1][t - nums[ind]];
            }
            int notTake = dp[ind - 1][t];

            dp[ind][t] = take + notTake;
        }
    }

    return dp[n - 1][newTarget];
}

