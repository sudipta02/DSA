https://www.geeksforgeeks.org/problems/knapsack-with-duplicate-items4201/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=knapsack-with-duplicate-items
// Approach 1(Memoization)
class Solution {
  public:
    int f(int cap, int ind, vector<int> &val, vector<int> &wt, vector<vector<int>> &dp){
        if(ind == 0){
            return (cap/wt[0]) * val[0];
        }
        if(dp[ind][cap] != -1) return dp[ind][cap];
        int notTake = 0 + f(cap, ind - 1, val, wt, dp);
        int take = INT_MIN;
        if(wt[ind] <= cap) take = val[ind] + f(cap - wt[ind], ind, val, wt, dp);
        return dp[ind][cap] = max(notTake, take);
    }
    int knapSack(vector<int>& val, vector<int>& wt, int capacity) {
        int n = val.size();
        vector<vector<int>> dp(n, vector<int>(capacity + 1, -1));
        return f(capacity, n-1, val, wt, dp);
    }
};

//Approach 2(Tabulation)
class Solution {
    public:
      int knapSack(vector<int>& val, vector<int>& wt, int capacity) {
          int n = val.size();
          vector<vector<int>> dp(n, vector<int>(capacity + 1, 0));
          for(int i = 0; i <= capacity; i++){
              dp[0][i] = (i/wt[0]) * val[0];
          }
          for(int i = 1; i < n; i++){
              for(int j = 0; j <= capacity; j++){
                  int notTake = 0 + dp[i - 1][j];
                  int take = INT_MIN;
                  if(wt[i] <= j) take = val[i] + dp[i][j - wt[i]];
                  dp[i][j] = max(notTake, take);
              }
          }
          return dp[n-1][capacity];
      }
};