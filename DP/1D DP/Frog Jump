https://bit.ly/3Xn0Kkw
Approach - 1 (Memoization/Top-Down)
TC: O(N), SC: O(N)
class Solution {
  public:
    int recursion(vector<int> &height, int n, vector<int> &dp){
        if(n == 0) return 0;
        if(dp[n] != -1) return dp[n];
        int left = recursion(height, n-1, dp) + abs(height[n] - height[n-1]);
        int right = INT_MAX;
        if(n > 1)
            right = recursion(height, n-2, dp) + abs(height[n] - height[n-2]);
        return dp[n] = min(left, right);
    }
    int minimumEnergy(vector<int>& height, int n) {
        vector<int> dp(n+1, -1);
        return recursion(height, n-1, dp);
    }
};

Approach - 2 (Tabulation/Bottom-UP)
TC: O(N), SC: O(N)
class Solution {
  public:
    int minimumEnergy(vector<int>& height, int n) {
        vector<int> dp(n);
        dp[0] = 0;
        for(int i = 1; i < n; i++){
            int left = dp[i-1] + abs(height[i] - height[i-1]);
            int right = INT_MAX;
            if(i > 1)
                right = dp[i-2] + abs(height[i] - height[i-2]);
            dp[i] = min(left, right);
        }
        return dp[n-1];
    }
};

Approach - 3 (Space Optimized)
TC: O(N), SC: O(1)
class Solution {
  public:
    int minimumEnergy(vector<int>& height, int n) {
        int prev = 0, prev2 = 0;
        for(int i = 1; i < n; i++){
            int left = prev + abs(height[i] - height[i-1]);
            int right = INT_MAX;
            if(i > 1)
                right = prev2 + abs(height[i] - height[i-2]);
            int cur = min(left, right);
            prev2 = prev;
            prev = cur;
        }
        return prev;
    }
};