https://leetcode.com/problems/minimum-falling-path-sum/
Tabulation method
class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        if(n == 1) return matrix[0][0];
        if(n == 2){
            return min(matrix[0][0] + min(matrix[1][0], matrix[1][1]), matrix[0][1] + min(matrix[1][0], matrix[1][1]));
        }
        vector<vector<int>> dp(n, vector<int>(n));
        int ans = INT_MAX;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(i == 0){
                    dp[i][j] = matrix[i][j];
                }
                else if(j == 0){
                    dp[i][j] = matrix[i][j] + min(dp[i-1][j], dp[i-1][j+1]);
                }
                else if(j == n-1){
                    dp[i][j] = matrix[i][j] + min(dp[i-1][j], dp[i-1][j-1]);
                }
                else {
                    int min_ = min(dp[i-1][j-1], dp[i-1][j]);
                    min_ = min(min_, dp[i-1][j+1]);
                    dp[i][j] = matrix[i][j] + min_;
                }

                if(i == n-1){
                    ans = min(ans, dp[i][j]);
                }
            }
        }
        return ans;
    }
};