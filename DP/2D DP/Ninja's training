https://www.naukri.com/code360/problems/ninja-s-training_3621003?leftPanelTabValue=PROBLEM
TC: O(4*N), SC: O(N)
Approach 1 (Memoization)
int recursion(int day, int task, vector<vector<int>> &points, vector<vector<int>> &dp){
    if(day == 0){
        int maxP = 0;
        for(int i = 0; i < 3; i++){
            if(i != task) maxP = max(maxP, points[day][i]);
        }
        return maxP;
    }
    if(dp[day][task] != -1) return dp[day][task];
    int maxP = 0;
    for(int i = 0; i < 3; i++){
        if(i != task){
            int point = points[day][i] + recursion(day-1, i, points, dp);
            maxP = max(maxP, point);
        }
    }
    return dp[day][task] = maxP;
}
int ninjaTraining(int n, vector<vector<int>> &points)
{
    vector<vector<int>> dp(n, vector<int>(4, -1));
    return recursion(n-1, 3, points, dp); //4 types of task - 0, 1, 2, 3 (3 means no task performed previously)
}

Approach 2 (Tabulation)
int ninjaTraining(int n, vector<vector<int>> &points)
{
    vector<vector<int>> dp(n, vector<int>(3, 0));

    // Initialize the first day
    for(int j = 0; j < 3; j++){
        dp[0][j] = points[0][j];
    }

    // Fill the DP table
    for(int i = 1; i < n; i++){
        for(int j = 0; j < 3; j++){
            int maxP = 0;
            for(int k = 0; k < 3; k++){
                if(k != j){  // Avoid taking the same task as previous day
                    maxP = max(maxP, dp[i-1][k]);
                }
            }
            dp[i][j] = points[i][j] + maxP;
        }
    }

    int ans = 0;
    for(int j = 0; j < 3; j++){
        ans = max(ans, dp[n-1][j]);
    }
    return ans;
}