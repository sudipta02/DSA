https://leetcode.com/problems/maximum-width-of-binary-tree/
T.C: O(N)
S.C: O(N)
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        int result = 0;
        if(root == NULL) return result;
        queue<pair<TreeNode*, long long>> q;
        q.push({root, 0});
        while(!q.empty()){
            int size = q.size();
            int min_id = q.front().second;
            long long first, last;
            for(int i = 0; i < size; i++){
                TreeNode* node = q.front().first;
                long long cur_id = q.front().second - min_id;
                q.pop();
                if(i == 0) first = cur_id;
                if(i == size-1) last = cur_id;
                if(node->left != NULL){
                    q.push({node->left, 2*cur_id + 1});
                }
                if(node->right != NULL){
                    q.push({node->right, 2*cur_id + 2});
                }
            }
            result = max((long long)result, last-first + 1);
        }
        return result;
    }
};