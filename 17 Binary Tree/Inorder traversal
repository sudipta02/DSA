/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//Recursive approach
T.C: O(N)
S.C: O(H) , where H is height of BT. H can be N on worst case
class Solution {
public:
    void traverse(vector<int> &result, TreeNode* root){
        if(root == NULL){
            return;
        }
        traverse(result, root->left);
        result.push_back(root->val);
        traverse(result, root->right);
    }
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> result;
        traverse(result, root);
        return result;
    }
};

//Iterative approach
T.C: O(N)
S.C: O(N)
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        stack<TreeNode*> st;
        vector<int> result;
        while(root != NULL || !st.empty()){
            if(root != NULL){
                st.push(root);
                root = root->left;
            }
            else {
                root = st.top();
                st.pop();
                result.push_back(root->val);
                root = root->right;
            }
        }
        return result;
    }
};