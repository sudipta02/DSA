https://leetcode.com/problems/longest-palindromic-substring/
T.C: O(N^2)
S.C: O(N^2)
class Solution {
public:
    string longestPalindrome(string s) {
        string result = s.substr(0,1);
        int resLen = 1;
        int n = s.size();
        vector<vector<int>> v(n, vector<int>(n,0));
        for(int i = 0; i < n; i++){
            v[i][i] = 1;
        }
        for(int i = 0, j = 1; i < n-1; i++, j++) {
            if(s[i] == s[j]) {
                v[i][j] = 1;
                if(j-i+1 > resLen){
                    resLen = j-i+1;
                    result = s.substr(i, j-i+1);
                }
            }
            else {
                v[i][j] = 0;
            }
        }
        for(int j = 2; j < n; j++){
            for(int i = 0, k = j; i < n-j; i++, k++){
                if(s[i] == s[k] && v[i+1][k-1] == 1){
                    v[i][k] = 1;
                    if(k-i+1 > resLen){
                        resLen = k-i+1;
                        result = s.substr(i, k-i+1);
                    }
                }
                else {
                    v[i][k] = 0;
                }
            }
        }
        return result;
    }
};