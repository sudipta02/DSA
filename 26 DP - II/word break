https://leetcode.com/problems/word-break/description/
TC: O(n*m*n) //The last n is for comparing the substring
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        int n = s.length();
        vector<bool> dp(n + 1, false);
        dp[n] = true;  // Base case

        for (int i = n - 1; i >= 0; i--) {
            for (int w = 0; w < wordDict.size(); w++) {
                int len = wordDict[w].length();
                if (i + len <= n && s.substr(i, len) == wordDict[w]) {
                    dp[i] = dp[i + len];
                }
                if (dp[i]) break; // If found a valid partition, break early
            }
        }

        return dp[0];
    }
};