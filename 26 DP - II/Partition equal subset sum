// https://leetcode.com/problems/partition-equal-subset-sum/
//Approach 1(Memoization)
class Solution {
public:
    bool f(int ind, int target, vector<int> &nums, vector<vector<int>> &dp){
        if(target == 0) return true;
        if(ind == 0){
            if(nums[0] == target) return true;
            return false;
        }
        if(dp[ind][target] != -1) return dp[ind][target];
        bool take = false;
        if(nums[ind] <= target) {
            take = f(ind-1, target - nums[ind], nums, dp);
        }
        bool notTake = f(ind-1, target, nums, dp);
        if(take || notTake){
            return dp[ind][target] = true;
        }
        return dp[ind][target] = false;
    }
    bool canPartition(vector<int>& nums) {
        int sum = 0;
        int n = nums.size();
        for(int i = 0; i < n; i++){
            sum += nums[i];
        }
        if(sum % 2 != 0) return false;
        int target = sum/2;
        vector<vector<int>> dp(n, vector<int>(target+1, -1));
        return f(n-1, target, nums, dp);
    }
};

//Approach 2(Tabulation)
class Solution {
    public:
        bool canPartition(vector<int>& nums) {
            int sum = 0;
            int n = nums.size();
            for(int i = 0; i < n; i++){
                sum += nums[i];
            }
            if(sum % 2 != 0) return false;
            int target = sum/2;
            vector<vector<int>> dp(n, vector<int>(target+1, 0));
            for(int i = 0; i < n; i++){
                dp[i][0] = 1;
            }
            for(int i = 1; i <= target; i++){
                if(nums[0] == i) dp[0][i] = 1;
                else dp[0][i] = 0;
            }
            for(int ind = 1; ind < n; ind++){
                for(int t = 1; t <= target; t++){
                    bool take = false;
                    if(nums[ind] <= t) {
                        take = dp[ind-1][t - nums[ind]];
                    }
                    bool notTake = dp[ind-1][t];
                    if(take || notTake){
                        dp[ind][t] = true;
                    }
                    else dp[ind][t] = false;
                }
            }
            return dp[n-1][target];
        }
    };