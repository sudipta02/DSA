https://www.geeksforgeeks.org/problems/inversion-of-array-1587115620/1
class Solution {
  public:
   long long merge(vector<int> &arr, int low, int mid, int high){
        vector<int> temp;
        int left = low;
        int right = mid+1;
        int cnt = 0;
        while(left <= mid && right <= high){
            if(arr[left] <= arr[right]){
                temp.push_back(arr[left++]);
            }
            else {
                cnt += mid - left + 1;
                temp.push_back(arr[right++]);
            }
        }

        while(left <= mid){
            temp.push_back(arr[left++]);
        }
        while(right <= high){
            temp.push_back(arr[right++]);
        }

        for(int i = low; i <= high; i++){
            arr[i] = temp[i - low];
        }
        return cnt;
    }
    long long mergeSort(vector<int> &nums, int low, int high){
        if(low == high) return 0;
        int mid = (low + high)/2;
        int cnt = 0;
        cnt += mergeSort(nums, low, mid);
        cnt += mergeSort(nums, mid+1, high);
        cnt += merge(nums, low, mid, high);
        return cnt;
    }
    int inversionCount(vector<int> &arr) {
        int n = arr.size();
        return mergeSort(arr, 0, n-1);
        
    }
};
