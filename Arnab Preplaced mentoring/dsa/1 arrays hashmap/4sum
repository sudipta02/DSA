https://leetcode.com/problems/4sum/
TC: O(N^3 + NlogN)
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n = nums.size();
        vector<vector<int>> result;
        sort(nums.begin(), nums.end());
        for(int a = 0; a < n; a++){
            if(a > 0 && nums[a] == nums[a-1]) continue;
            for(int b = a+1; b < n; b++){
                if(b > a+1 && nums[b] == nums[b-1]) continue;
                int c = b+1;
                int d = n - 1;
                while(c < d){
                    long long sum = (long long)nums[a] + nums[b] + nums[c] + nums[d];
                    if(sum == (long long)target){
                        result.push_back({nums[a], nums[b], nums[c], nums[d]});
                        c++;
                        d--;
                        while(c < d && nums[c] == nums[c-1]) c++;
                        while(c < d && nums[d] == nums[d+1]) d--;
                    }
                    else if((sum > (long long)target)) d--;
                    else c++;
                }
            }
        }
        return result;
    }
};