https://leetcode.com/problems/product-of-array-except-self/
TC: O(N)
SC: O(N)
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans(n);
        vector<int> pp(n+1, 1), sp(n+1, 1);
        for(int i = 1, j = n-1; i <= n; i++, j--){
            pp[i] = pp[i-1] * nums[i-1];
            sp[j] = sp[j+1] * nums[j];
        }
        for(int i = 0; i < n; i++){
            ans[i] = pp[i] * sp[i+1];
        }
        return ans;
    }
};

TC: O(N)
SC: O(1) (The output array does not count as extra space for space complexity analysis.)
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans(n, 1);
        for(int i = 1; i < n; i++){
            ans[i] = ans[i-1] * nums[i-1];
        }
        int right = 1;
        for(int i = n-1; i >= 0; i--){
            ans[i] = ans[i] * right;
            right = right * nums[i];
        }
        return ans;
    }
};